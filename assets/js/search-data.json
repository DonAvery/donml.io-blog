{
  
    
        "post0": {
            "title": "2. Machine Learning for Regression",
            "content": "import pandas as pd import numpy as np . 2.2 Data preparation . data = &#39;https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-02-car-price/data.csv&#39; . Using wget to download the data needed for this regression . !wget $data . --2022-09-11 20:38:11-- https://raw.githubusercontent.com/alexeygrigorev/mlbookcamp-code/master/chapter-02-car-price/data.csv Resolving raw.githubusercontent.com (raw.githubusercontent.com)... 185.199.111.133, 185.199.110.133, 185.199.109.133, ... Connecting to raw.githubusercontent.com (raw.githubusercontent.com)|185.199.111.133|:443... connected. HTTP request sent, awaiting response... 200 OK Length: 1475504 (1.4M) [text/plain] Saving to: ‘data.csv’ data.csv 100%[===================&gt;] 1.41M 286KB/s in 5.0s 2022-09-11 20:38:19 (286 KB/s) - ‘data.csv’ saved [1475504/1475504] . Load the file using pandas read read_csv function . df = pd.read_csv(&#39;data.csv&#39;) . df . Make Model Year Engine Fuel Type Engine HP Engine Cylinders Transmission Type Driven_Wheels Number of Doors Market Category Vehicle Size Vehicle Style highway MPG city mpg Popularity MSRP . 0 BMW | 1 Series M | 2011 | premium unleaded (required) | 335.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Factory Tuner,Luxury,High-Performance | Compact | Coupe | 26 | 19 | 3916 | 46135 | . 1 BMW | 1 Series | 2011 | premium unleaded (required) | 300.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury,Performance | Compact | Convertible | 28 | 19 | 3916 | 40650 | . 2 BMW | 1 Series | 2011 | premium unleaded (required) | 300.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury,High-Performance | Compact | Coupe | 28 | 20 | 3916 | 36350 | . 3 BMW | 1 Series | 2011 | premium unleaded (required) | 230.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury,Performance | Compact | Coupe | 28 | 18 | 3916 | 29450 | . 4 BMW | 1 Series | 2011 | premium unleaded (required) | 230.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury | Compact | Convertible | 28 | 18 | 3916 | 34500 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 11909 Acura | ZDX | 2012 | premium unleaded (required) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 46120 | . 11910 Acura | ZDX | 2012 | premium unleaded (required) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 56670 | . 11911 Acura | ZDX | 2012 | premium unleaded (required) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 50620 | . 11912 Acura | ZDX | 2013 | premium unleaded (recommended) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 50920 | . 11913 Lincoln | Zephyr | 2006 | regular unleaded | 221.0 | 6.0 | AUTOMATIC | front wheel drive | 4.0 | Luxury | Midsize | Sedan | 26 | 17 | 61 | 28995 | . 11914 rows × 16 columns . df.columns . Index([&#39;Make&#39;, &#39;Model&#39;, &#39;Year&#39;, &#39;Engine Fuel Type&#39;, &#39;Engine HP&#39;, &#39;Engine Cylinders&#39;, &#39;Transmission Type&#39;, &#39;Driven_Wheels&#39;, &#39;Number of Doors&#39;, &#39;Market Category&#39;, &#39;Vehicle Size&#39;, &#39;Vehicle Style&#39;, &#39;highway MPG&#39;, &#39;city mpg&#39;, &#39;Popularity&#39;, &#39;MSRP&#39;], dtype=&#39;object&#39;) . Cleaning up our column names to remove caps and replace spaces with underscores and the operations can be chained together and reassigned to the columns variable . df.columns = df.columns.str.lower().str.replace(&#39; &#39;, &#39;_&#39;) . df . make model year engine_fuel_type engine_hp engine_cylinders transmission_type driven_wheels number_of_doors market_category vehicle_size vehicle_style highway_mpg city_mpg popularity msrp . 0 BMW | 1 Series M | 2011 | premium unleaded (required) | 335.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Factory Tuner,Luxury,High-Performance | Compact | Coupe | 26 | 19 | 3916 | 46135 | . 1 BMW | 1 Series | 2011 | premium unleaded (required) | 300.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury,Performance | Compact | Convertible | 28 | 19 | 3916 | 40650 | . 2 BMW | 1 Series | 2011 | premium unleaded (required) | 300.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury,High-Performance | Compact | Coupe | 28 | 20 | 3916 | 36350 | . 3 BMW | 1 Series | 2011 | premium unleaded (required) | 230.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury,Performance | Compact | Coupe | 28 | 18 | 3916 | 29450 | . 4 BMW | 1 Series | 2011 | premium unleaded (required) | 230.0 | 6.0 | MANUAL | rear wheel drive | 2.0 | Luxury | Compact | Convertible | 28 | 18 | 3916 | 34500 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 11909 Acura | ZDX | 2012 | premium unleaded (required) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 46120 | . 11910 Acura | ZDX | 2012 | premium unleaded (required) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 56670 | . 11911 Acura | ZDX | 2012 | premium unleaded (required) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 50620 | . 11912 Acura | ZDX | 2013 | premium unleaded (recommended) | 300.0 | 6.0 | AUTOMATIC | all wheel drive | 4.0 | Crossover,Hatchback,Luxury | Midsize | 4dr Hatchback | 23 | 16 | 204 | 50920 | . 11913 Lincoln | Zephyr | 2006 | regular unleaded | 221.0 | 6.0 | AUTOMATIC | front wheel drive | 4.0 | Luxury | Midsize | Sedan | 26 | 17 | 61 | 28995 | . 11914 rows × 16 columns . df.dtypes . make object model object year int64 engine_fuel_type object engine_hp float64 engine_cylinders float64 transmission_type object driven_wheels object number_of_doors float64 market_category object vehicle_size object vehicle_style object highway_mpg int64 city_mpg int64 popularity int64 msrp int64 dtype: object . We can see in the dataframe that the data is also inconsistant in its formatting. Lets clean that up and we start by identifying which columns contain a string format, which is equated by the data type object . df.dtypes == &#39;object&#39; . make True model True year False engine_fuel_type True engine_hp False engine_cylinders False transmission_type True driven_wheels True number_of_doors False market_category True vehicle_size True vehicle_style True highway_mpg False city_mpg False popularity False msrp False dtype: bool . Now we want to select only those columns (or &#39;features&#39;) that are of the data type &#39;object&#39; . df.dtypes[df.dtypes == &#39;object&#39;] . make object model object engine_fuel_type object transmission_type object driven_wheels object market_category object vehicle_size object vehicle_style object dtype: object . Now that we know which features are objects we don&#39;t need the return showing us the data types and we can &#39;unselect&#39; those by using .index to just retrieve the index . df.dtypes[df.dtypes == &#39;object&#39;].index . Index([&#39;make&#39;, &#39;model&#39;, &#39;engine_fuel_type&#39;, &#39;transmission_type&#39;, &#39;driven_wheels&#39;, &#39;market_category&#39;, &#39;vehicle_size&#39;, &#39;vehicle_style&#39;], dtype=&#39;object&#39;) . Lets assign those to a python list and call it strings . strings = list(df.dtypes[df.dtypes == &#39;object&#39;].index) . Now we are going to do the same operation on the data in the object type features that we did to the column names and we can see that all of our data has the same formatting . for col in strings: df[col] = df[col].str.lower().str.replace(&#39; &#39;, &#39;_&#39;) df.head() . make model year engine_fuel_type engine_hp engine_cylinders transmission_type driven_wheels number_of_doors market_category vehicle_size vehicle_style highway_mpg city_mpg popularity msrp . 0 bmw | 1_series_m | 2011 | premium_unleaded_(required) | 335.0 | 6.0 | manual | rear_wheel_drive | 2.0 | factory_tuner,luxury,high-performance | compact | coupe | 26 | 19 | 3916 | 46135 | . 1 bmw | 1_series | 2011 | premium_unleaded_(required) | 300.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury,performance | compact | convertible | 28 | 19 | 3916 | 40650 | . 2 bmw | 1_series | 2011 | premium_unleaded_(required) | 300.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury,high-performance | compact | coupe | 28 | 20 | 3916 | 36350 | . 3 bmw | 1_series | 2011 | premium_unleaded_(required) | 230.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury,performance | compact | coupe | 28 | 18 | 3916 | 29450 | . 4 bmw | 1_series | 2011 | premium_unleaded_(required) | 230.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury | compact | convertible | 28 | 18 | 3916 | 34500 | . 2.3 Exploratory data analysis . df . make model year engine_fuel_type engine_hp engine_cylinders transmission_type driven_wheels number_of_doors market_category vehicle_size vehicle_style highway_mpg city_mpg popularity msrp . 0 bmw | 1_series_m | 2011 | premium_unleaded_(required) | 335.0 | 6.0 | manual | rear_wheel_drive | 2.0 | factory_tuner,luxury,high-performance | compact | coupe | 26 | 19 | 3916 | 46135 | . 1 bmw | 1_series | 2011 | premium_unleaded_(required) | 300.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury,performance | compact | convertible | 28 | 19 | 3916 | 40650 | . 2 bmw | 1_series | 2011 | premium_unleaded_(required) | 300.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury,high-performance | compact | coupe | 28 | 20 | 3916 | 36350 | . 3 bmw | 1_series | 2011 | premium_unleaded_(required) | 230.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury,performance | compact | coupe | 28 | 18 | 3916 | 29450 | . 4 bmw | 1_series | 2011 | premium_unleaded_(required) | 230.0 | 6.0 | manual | rear_wheel_drive | 2.0 | luxury | compact | convertible | 28 | 18 | 3916 | 34500 | . ... ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | ... | . 11909 acura | zdx | 2012 | premium_unleaded_(required) | 300.0 | 6.0 | automatic | all_wheel_drive | 4.0 | crossover,hatchback,luxury | midsize | 4dr_hatchback | 23 | 16 | 204 | 46120 | . 11910 acura | zdx | 2012 | premium_unleaded_(required) | 300.0 | 6.0 | automatic | all_wheel_drive | 4.0 | crossover,hatchback,luxury | midsize | 4dr_hatchback | 23 | 16 | 204 | 56670 | . 11911 acura | zdx | 2012 | premium_unleaded_(required) | 300.0 | 6.0 | automatic | all_wheel_drive | 4.0 | crossover,hatchback,luxury | midsize | 4dr_hatchback | 23 | 16 | 204 | 50620 | . 11912 acura | zdx | 2013 | premium_unleaded_(recommended) | 300.0 | 6.0 | automatic | all_wheel_drive | 4.0 | crossover,hatchback,luxury | midsize | 4dr_hatchback | 23 | 16 | 204 | 50920 | . 11913 lincoln | zephyr | 2006 | regular_unleaded | 221.0 | 6.0 | automatic | front_wheel_drive | 4.0 | luxury | midsize | sedan | 26 | 17 | 61 | 28995 | . 11914 rows × 16 columns . df.columns . Index([&#39;make&#39;, &#39;model&#39;, &#39;year&#39;, &#39;engine_fuel_type&#39;, &#39;engine_hp&#39;, &#39;engine_cylinders&#39;, &#39;transmission_type&#39;, &#39;driven_wheels&#39;, &#39;number_of_doors&#39;, &#39;market_category&#39;, &#39;vehicle_size&#39;, &#39;vehicle_style&#39;, &#39;highway_mpg&#39;, &#39;city_mpg&#39;, &#39;popularity&#39;, &#39;msrp&#39;], dtype=&#39;object&#39;) . It is time to understand the data that we loaded, we can iterate through the column names to understand . for col in df.columns: print(col) print(df[col].head()) print() . make 0 bmw 1 bmw 2 bmw 3 bmw 4 bmw Name: make, dtype: object model 0 1_series_m 1 1_series 2 1_series 3 1_series 4 1_series Name: model, dtype: object year 0 2011 1 2011 2 2011 3 2011 4 2011 Name: year, dtype: int64 engine_fuel_type 0 premium_unleaded_(required) 1 premium_unleaded_(required) 2 premium_unleaded_(required) 3 premium_unleaded_(required) 4 premium_unleaded_(required) Name: engine_fuel_type, dtype: object engine_hp 0 335.0 1 300.0 2 300.0 3 230.0 4 230.0 Name: engine_hp, dtype: float64 engine_cylinders 0 6.0 1 6.0 2 6.0 3 6.0 4 6.0 Name: engine_cylinders, dtype: float64 transmission_type 0 manual 1 manual 2 manual 3 manual 4 manual Name: transmission_type, dtype: object driven_wheels 0 rear_wheel_drive 1 rear_wheel_drive 2 rear_wheel_drive 3 rear_wheel_drive 4 rear_wheel_drive Name: driven_wheels, dtype: object number_of_doors 0 2.0 1 2.0 2 2.0 3 2.0 4 2.0 Name: number_of_doors, dtype: float64 market_category 0 factory_tuner,luxury,high-performance 1 luxury,performance 2 luxury,high-performance 3 luxury,performance 4 luxury Name: market_category, dtype: object vehicle_size 0 compact 1 compact 2 compact 3 compact 4 compact Name: vehicle_size, dtype: object vehicle_style 0 coupe 1 convertible 2 coupe 3 coupe 4 convertible Name: vehicle_style, dtype: object highway_mpg 0 26 1 28 2 28 3 28 4 28 Name: highway_mpg, dtype: int64 city_mpg 0 19 1 19 2 20 3 18 4 18 Name: city_mpg, dtype: int64 popularity 0 3916 1 3916 2 3916 3 3916 4 3916 Name: popularity, dtype: int64 msrp 0 46135 1 40650 2 36350 3 29450 4 34500 Name: msrp, dtype: int64 . The above doesn&#39;t give us much detail, for instance, under &#39;make&#39; it shows all bmw&#39;s but we can use the unique and nunique functions to get a little better understanding of what our data contains. . for col in df.columns: print(col) # prints the col name print(df[col].unique()[:5]) # prints the first 5 unique values in the col print(df[col].nunique()) # calculates the number of unique values in each col print() . make [&#39;bmw&#39; &#39;audi&#39; &#39;fiat&#39; &#39;mercedes-benz&#39; &#39;chrysler&#39;] 48 model [&#39;1_series_m&#39; &#39;1_series&#39; &#39;100&#39; &#39;124_spider&#39; &#39;190-class&#39;] 914 year [2011 2012 2013 1992 1993] 28 engine_fuel_type [&#39;premium_unleaded_(required)&#39; &#39;regular_unleaded&#39; &#39;premium_unleaded_(recommended)&#39; &#39;flex-fuel_(unleaded/e85)&#39; &#39;diesel&#39;] 10 engine_hp [335. 300. 230. 320. 172.] 356 engine_cylinders [ 6. 4. 5. 8. 12.] 9 transmission_type [&#39;manual&#39; &#39;automatic&#39; &#39;automated_manual&#39; &#39;direct_drive&#39; &#39;unknown&#39;] 5 driven_wheels [&#39;rear_wheel_drive&#39; &#39;front_wheel_drive&#39; &#39;all_wheel_drive&#39; &#39;four_wheel_drive&#39;] 4 number_of_doors [ 2. 4. 3. nan] 3 market_category [&#39;factory_tuner,luxury,high-performance&#39; &#39;luxury,performance&#39; &#39;luxury,high-performance&#39; &#39;luxury&#39; &#39;performance&#39;] 71 vehicle_size [&#39;compact&#39; &#39;midsize&#39; &#39;large&#39;] 3 vehicle_style [&#39;coupe&#39; &#39;convertible&#39; &#39;sedan&#39; &#39;wagon&#39; &#39;4dr_hatchback&#39;] 16 highway_mpg [26 28 27 25 24] 59 city_mpg [19 20 18 17 16] 69 popularity [3916 3105 819 617 1013] 48 msrp [46135 40650 36350 29450 34500] 6049 . Let us see what the distribution of prices are, we can use visualization to do this. We will import matplotlib and seaborn . import matplotlib.pyplot as plt import seaborn as sns %matplotlib inline # this allows us to display the plots . sns.histplot(df.msrp) . &lt;AxesSubplot:xlabel=&#39;msrp&#39;, ylabel=&#39;Count&#39;&gt; . It isn&#39;t a very good plot right off the bat, we can increase it&#39;s readability. . sns.histplot(df.msrp, bins=50) . &lt;AxesSubplot:xlabel=&#39;msrp&#39;, ylabel=&#39;Count&#39;&gt; . That is a very long tail, with most of the car prices grouped near the zeros and some cars valued up around 2 million. We will filter out some of the high price outliers to, perhaps, get a better representation of the data. . sns.histplot(df.msrp[df.msrp &lt; 100000], bins=50) . &lt;AxesSubplot:xlabel=&#39;msrp&#39;, ylabel=&#39;Count&#39;&gt; . Our data has that very long tail, which will confuse our model. We will have to do something to change this. Changing the prices to a logarithm scale, will group our prices closer. A standard practice in converting a log scale is adding 1 to each data point. This ensures that there are no errors in the event that one of the points is a zero. . price_logs = np.log1p(df.msrp) price_logs . 0 10.739349 1 10.612779 2 10.500977 3 10.290483 4 10.448744 ... 11909 10.739024 11910 10.945018 11911 10.832122 11912 10.838031 11913 10.274913 Name: msrp, Length: 11914, dtype: float64 . Now we have our prices close together, our graph should look better. . sns.histplot(price_logs, bins=50) . &lt;AxesSubplot:xlabel=&#39;msrp&#39;, ylabel=&#39;Count&#39;&gt; . We have eliminated that long tail off to the right and now our data looks more like a normal distribution. . Missing values . df.isnull().sum() . make 0 model 0 year 0 engine_fuel_type 3 engine_hp 69 engine_cylinders 30 transmission_type 0 driven_wheels 0 number_of_doors 6 market_category 3742 vehicle_size 0 vehicle_style 0 highway_mpg 0 city_mpg 0 popularity 0 msrp 0 dtype: int64 . 2.4 Setting up the validation framework . Let&#39;s draw it . len(df) . 11914 . We have 11,914 records that need to be separated into training, validation and testing sets. Lets calculate how many records will be in each set using len() and some math. . n = len(df) . 2382 .",
            "url": "https://donavery.github.io/donml.io-blog/2022/09/12/2.-Machine-Learning-for-Regression.html",
            "relUrl": "/2022/09/12/2.-Machine-Learning-for-Regression.html",
            "date": " • Sep 12, 2022"
        }
        
    
  
    
        ,"post1": {
            "title": "Fastpages Notebook Blog Post",
            "content": "About . This notebook is a demonstration of some of capabilities of fastpages with notebooks. . With fastpages you can save your jupyter notebooks into the _notebooks folder at the root of your repository, and they will be automatically be converted to Jekyll compliant blog posts! . Front Matter . The first cell in your Jupyter Notebook or markdown blog post contains front matter. Front matter is metadata that can turn on/off options in your Notebook. It is formatted like this: . # &quot;My Title&quot; &gt; &quot;Awesome summary&quot; - toc:true- branch: master - badges: true - comments: true - author: Hamel Husain &amp; Jeremy Howard - categories: [fastpages, jupyter] . Setting toc: true will automatically generate a table of contents | Setting badges: true will automatically include GitHub and Google Colab links to your notebook. | Setting comments: true will enable commenting on your blog post, powered by utterances. | . The title and description need to be enclosed in double quotes only if they include special characters such as a colon. More details and options for front matter can be viewed on the front matter section of the README. . Markdown Shortcuts . A #hide comment at the top of any code cell will hide both the input and output of that cell in your blog post. . A #hide_input comment at the top of any code cell will only hide the input of that cell. . The comment #hide_input was used to hide the code that produced this. . put a #collapse-hide flag at the top of any cell if you want to hide that cell by default, but give the reader the option to show it: . import pandas as pd import altair as alt . . put a #collapse-show flag at the top of any cell if you want to show that cell by default, but give the reader the option to hide it: . cars = &#39;https://vega.github.io/vega-datasets/data/cars.json&#39; movies = &#39;https://vega.github.io/vega-datasets/data/movies.json&#39; sp500 = &#39;https://vega.github.io/vega-datasets/data/sp500.csv&#39; stocks = &#39;https://vega.github.io/vega-datasets/data/stocks.csv&#39; flights = &#39;https://vega.github.io/vega-datasets/data/flights-5k.json&#39; . . place a #collapse-output flag at the top of any cell if you want to put the output under a collapsable element that is closed by default, but give the reader the option to open it: . print(&#39;The comment #collapse-output was used to collapse the output of this cell by default but you can expand it.&#39;) . The comment #collapse-output was used to collapse the output of this cell by default but you can expand it. . . Interactive Charts With Altair . Charts made with Altair remain interactive. Example charts taken from this repo, specifically this notebook. . Example 1: DropDown . # use specific hard-wired values as the initial selected values selection = alt.selection_single( name=&#39;Select&#39;, fields=[&#39;Major_Genre&#39;, &#39;MPAA_Rating&#39;], init={&#39;Major_Genre&#39;: &#39;Drama&#39;, &#39;MPAA_Rating&#39;: &#39;R&#39;}, bind={&#39;Major_Genre&#39;: alt.binding_select(options=genres), &#39;MPAA_Rating&#39;: alt.binding_radio(options=mpaa)} ) # scatter plot, modify opacity based on selection alt.Chart(df).mark_circle().add_selection( selection ).encode( x=&#39;Rotten_Tomatoes_Rating:Q&#39;, y=&#39;IMDB_Rating:Q&#39;, tooltip=&#39;Title:N&#39;, opacity=alt.condition(selection, alt.value(0.75), alt.value(0.05)) ) . Example 2: Tooltips . alt.Chart(df).mark_circle().add_selection( alt.selection_interval(bind=&#39;scales&#39;, encodings=[&#39;x&#39;]) ).encode( alt.X(&#39;Rotten_Tomatoes_Rating&#39;, type=&#39;quantitative&#39;), alt.Y(&#39;IMDB_Rating&#39;, type=&#39;quantitative&#39;, axis=alt.Axis(minExtent=30)), # y=alt.Y(&#39;IMDB_Rating:Q&#39;, ), # use min extent to stabilize axis title placement tooltip=[&#39;Title:N&#39;, &#39;Release_Date:N&#39;, &#39;IMDB_Rating:Q&#39;, &#39;Rotten_Tomatoes_Rating:Q&#39;] ).properties( width=500, height=400 ) . Example 3: More Tooltips . label = alt.selection_single( encodings=[&#39;x&#39;], # limit selection to x-axis value on=&#39;mouseover&#39;, # select on mouseover events nearest=True, # select data point nearest the cursor empty=&#39;none&#39; # empty selection includes no data points ) # define our base line chart of stock prices base = alt.Chart().mark_line().encode( alt.X(&#39;date:T&#39;), alt.Y(&#39;price:Q&#39;, scale=alt.Scale(type=&#39;log&#39;)), alt.Color(&#39;symbol:N&#39;) ) alt.layer( base, # base line chart # add a rule mark to serve as a guide line alt.Chart().mark_rule(color=&#39;#aaa&#39;).encode( x=&#39;date:T&#39; ).transform_filter(label), # add circle marks for selected time points, hide unselected points base.mark_circle().encode( opacity=alt.condition(label, alt.value(1), alt.value(0)) ).add_selection(label), # add white stroked text to provide a legible background for labels base.mark_text(align=&#39;left&#39;, dx=5, dy=-5, stroke=&#39;white&#39;, strokeWidth=2).encode( text=&#39;price:Q&#39; ).transform_filter(label), # add text labels for stock prices base.mark_text(align=&#39;left&#39;, dx=5, dy=-5).encode( text=&#39;price:Q&#39; ).transform_filter(label), data=stocks ).properties( width=500, height=400 ) . Data Tables . You can display tables per the usual way in your blog: . df[[&#39;Title&#39;, &#39;Worldwide_Gross&#39;, &#39;Production_Budget&#39;, &#39;Distributor&#39;, &#39;MPAA_Rating&#39;, &#39;IMDB_Rating&#39;, &#39;Rotten_Tomatoes_Rating&#39;]].head() . Title Worldwide_Gross Production_Budget Distributor MPAA_Rating IMDB_Rating Rotten_Tomatoes_Rating . 0 The Land Girls | 146083.0 | 8000000.0 | Gramercy | R | 6.1 | NaN | . 1 First Love, Last Rites | 10876.0 | 300000.0 | Strand | R | 6.9 | NaN | . 2 I Married a Strange Person | 203134.0 | 250000.0 | Lionsgate | None | 6.8 | NaN | . 3 Let&#39;s Talk About Sex | 373615.0 | 300000.0 | Fine Line | None | NaN | 13.0 | . 4 Slam | 1087521.0 | 1000000.0 | Trimark | R | 3.4 | 62.0 | . Images . Local Images . You can reference local images and they will be copied and rendered on your blog automatically. You can include these with the following markdown syntax: . ![](my_icons/fastai_logo.png) . . Remote Images . Remote images can be included with the following markdown syntax: . ![](https://image.flaticon.com/icons/svg/36/36686.svg) . . Animated Gifs . Animated Gifs work, too! . ![](https://upload.wikimedia.org/wikipedia/commons/7/71/ChessPawnSpecialMoves.gif) . . Captions . You can include captions with markdown images like this: . ![](https://www.fast.ai/images/fastai_paper/show_batch.png &quot;Credit: https://www.fast.ai/2020/02/13/fastai-A-Layered-API-for-Deep-Learning/&quot;) . . Other Elements . GitHub Flavored Emojis . Typing I give this post two :+1:! will render this: . I give this post two :+1:! . Tweetcards . Typing &gt; twitter: https://twitter.com/jakevdp/status/1204765621767901185?s=20 will render this: Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 . Youtube Videos . Typing &gt; youtube: https://youtu.be/XfoYk_Z5AkI will render this: . Boxes / Callouts . Typing &gt; Warning: There will be no second warning! will render this: . Warning: There will be no second warning! . Typing &gt; Important: Pay attention! It&#39;s important. will render this: . Important: Pay attention! It&#8217;s important. . Typing &gt; Tip: This is my tip. will render this: . Tip: This is my tip. . Typing &gt; Note: Take note of this. will render this: . Note: Take note of this. . Typing &gt; Note: A doc link to [an example website: fast.ai](https://www.fast.ai/) should also work fine. will render in the docs: . Note: A doc link to an example website: fast.ai should also work fine. . Footnotes . You can have footnotes in notebooks, however the syntax is different compared to markdown documents. This guide provides more detail about this syntax, which looks like this: . For example, here is a footnote {% fn 1 %}. And another {% fn 2 %} {{ &#39;This is the footnote.&#39; | fndetail: 1 }} {{ &#39;This is the other footnote. You can even have a [link](www.github.com)!&#39; | fndetail: 2 }} . For example, here is a footnote 1. . And another 2 . 1. This is the footnote.↩ . 2. This is the other footnote. You can even have a link!↩ .",
            "url": "https://donavery.github.io/donml.io-blog/jupyter/2020/02/20/test.html",
            "relUrl": "/jupyter/2020/02/20/test.html",
            "date": " • Feb 20, 2020"
        }
        
    
  
    
        ,"post2": {
            "title": "An Example Markdown Post",
            "content": "Example Markdown Post . Basic setup . Jekyll requires blog post files to be named according to the following format: . YEAR-MONTH-DAY-filename.md . Where YEAR is a four-digit number, MONTH and DAY are both two-digit numbers, and filename is whatever file name you choose, to remind yourself what this post is about. .md is the file extension for markdown files. . The first line of the file should start with a single hash character, then a space, then your title. This is how you create a “level 1 heading” in markdown. Then you can create level 2, 3, etc headings as you wish but repeating the hash character, such as you see in the line ## File names above. . Basic formatting . You can use italics, bold, code font text, and create links. Here’s a footnote 1. Here’s a horizontal rule: . . Lists . Here’s a list: . item 1 | item 2 | . And a numbered list: . item 1 | item 2 | Boxes and stuff . This is a quotation . . You can include alert boxes …and… . . You can include info boxes Images . . Code . You can format text and code per usual . General preformatted text: . # Do a thing do_thing() . Python code and output: . # Prints &#39;2&#39; print(1+1) . 2 . Formatting text as shell commands: . echo &quot;hello world&quot; ./some_script.sh --option &quot;value&quot; wget https://example.com/cat_photo1.png . Formatting text as YAML: . key: value - another_key: &quot;another value&quot; . Tables . Column 1 Column 2 . A thing | Another thing | . Tweetcards . Altair 4.0 is released! https://t.co/PCyrIOTcvvTry it with: pip install -U altairThe full list of changes is at https://t.co/roXmzcsT58 ...read on for some highlights. pic.twitter.com/vWJ0ZveKbZ . &mdash; Jake VanderPlas (@jakevdp) December 11, 2019 Footnotes . This is the footnote. &#8617; . |",
            "url": "https://donavery.github.io/donml.io-blog/markdown/2020/01/14/test-markdown-post.html",
            "relUrl": "/markdown/2020/01/14/test-markdown-post.html",
            "date": " • Jan 14, 2020"
        }
        
    
  

  
  

  
      ,"page1": {
          "title": "About Me",
          "content": "This website is powered by fastpages 1. . a blogging platform that natively supports Jupyter notebooks in addition to other formats. &#8617; . |",
          "url": "https://donavery.github.io/donml.io-blog/about/",
          "relUrl": "/about/",
          "date": ""
      }
      
  

  

  
  

  

  
  

  

  
  

  
  

  
  

  
      ,"page10": {
          "title": "",
          "content": "Sitemap: {{ “sitemap.xml” | absolute_url }} | .",
          "url": "https://donavery.github.io/donml.io-blog/robots.txt",
          "relUrl": "/robots.txt",
          "date": ""
      }
      
  

}